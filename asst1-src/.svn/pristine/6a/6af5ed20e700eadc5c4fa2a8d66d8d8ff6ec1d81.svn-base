OS design document

Part 1
The initial code operates incorrectly and produces incorrect codes due to a mutual exclusion problem. 
Each thread is able to access the critical section, which is in the while(flag) loop, allowing them to all access the shared counter at the same time,
 messing up the order of the numbers. In order to fix this, we need to use a lock so that mutual exclusion is achieved. 
We initialised a lock and put a lock around the critical section inside the while loop, solving the problem as each thread can only access it one at a time now.

Part 2
The error in this part is a simple deadlock problem that can be fixed by rearranging some of the lines. 
Initially, Bill and Ben acquire the locks in a different order, but the locks are shared between them. Bill acquires A then B but Ben acquires B then A. 
This means that if Bill acquires A and then Ben acquires B, both of them are stuck unable to proceed, causing a deadlock. 
By swapping it around so that they both acquire A then acquire B, this prevents it from happening, 
as whoever acquires A can only proceed by acquiring B and the other person will be waiting for A to be released. 
Hence to fix the problem we just need to swap the acquire a, 
acquire b and release a, release b in Ben, so that it looks like Bill or vice versa so both have them in the same order, fixing the deadlock problem.

Part 3
This is the typical consumer-producer problem in which the critical sections are consumer_receive and producer_send. 
We need to ensure that there is always enough for consumers to receive and that producers do not send too much. 
This can be done through the use of multiple semaphores. One semaphore EmptyCount to keep track of how many empty places, 
one semaphore FullCount for the number of elements currently inside and one semaphore UseQueue to ensure the integrity of the data structure by ensuring access 
by only one thread at a time. 

Empty count starts at BUFFER_SIZE and FullCount starts at 0, whilst UseQueue starts at 1. 
We kept the struct given by the code as we felt that it was appropriate to use. With this setup:

The Producer would continuously
    P(emptyCount)
    P(useQueue)
    putItemIntoQueue(item)
    V(useQueue)
    V(fullCount)
The Consumer would continuously
    P(fullCount)
    P(useQueue)
    getItemFromQueue()
    V(useQueue)
    V(emptyCount)
This prevents any problems from occurring such as consumers trying to consume when there is nothing and producers trying to produce when the data structure is full, 
whilst also preventing deadlocks from occurring.

Part 4
We felt that using the bulk of the code from part 3 would be appropriate as that was a very similar consumer-producer problem 
and would be a good starting point to work from. We also needed to add some locks similar in part 1 to ensure that there would not  
be any concurrency issues such as when mixing the drinks. Semaphores were used for taking and serving orders, similar to part 3. In particular we needed 3 semaphores
(to address the consumer-producer problem present. We also needed to employ a system where we would ensure that the drink resources would be accessed synchronously
so as to prevent simultaneous access. To do solve this we employed an array of locks corrosponding to each drink resource, that we use to ensure synchronicity. 
Similarily we added a lock in the BarOrder struct to that is used to ensure a bar order is processed by only 1 thread i.e a order is processed by only 1 bartender.   
 
Hence we essentially combined the problems faced in the first 3 parts and compared it to avoid concurrency issues, 
then we added the appropriate code needed to make the rest of the functions run smoothly.
